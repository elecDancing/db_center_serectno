/*
 * 程序名：tcpputfiles.cpp，采用tcp协议，实现文件上传的客户端。
 * 作者：Prtrick。
*/
#include "_public.h"
using namespace idc;

clogfile logfile;            // 日志对象。
ctcpclient tcpclient;     // 创建tcp通讯的客户端对象。

// 程序退出和信号2、15的处理函数。
void EXIT(int sig);

bool activetest();    // 心跳。

string strsendbuffer;   // 发送报文的buffer。
string strrecvbuffer;    // 接收报文的buffer。

int main(int argc,char *argv[])
{
    if (argc!=4)
    {
      printf("Using:./tcpputfiles logfile ip port\n");
      printf("Example:./tcpputfiles /log/idc/tcpputfiles.log 192.168.150.128 5005\n\n"); 
      return -1;
    }

    // 关闭全部的信号和输入输出。
    // 设置信号,在shell状态下可用 "kill + 进程号" 正常终止些进程。
    // 但请不要用 "kill -9 +进程号" 强行终止。
    // 在网络通讯程序中，一般不关IO，因为某些函数可能会往1和2中输出信息
    // 如果关了1和2，那么1和2会被socket重用，向1和2输出的信息会发送到网络中。
    //closeioandsignal(false); 
    signal(SIGINT,EXIT); signal(SIGTERM,EXIT);

    // 打开日志文件。
    if (logfile.open(argv[1])==false)
    {
        printf("打开日志文件失败（%s）。\n",argv[1]); return -1;
    }

    // 向服务端发起连接请求。
    if (tcpclient.connect(argv[2],atoi(argv[3]))==false)
    {
        logfile.write("tcpclient.connect(%s,%d) failed.\n",argv[2],atoi(argv[3])); EXIT(-1);
    }

    while (true)
    {
        sleep(10);

        // 发送心跳报文。
        if (activetest()==false) break;
    }
   
    EXIT(0);
}

// 心跳。 
bool activetest()    
{
    strsendbuffer="<activetest>ok</activetest>";
    logfile.write("发送：%s\n",strsendbuffer.c_str());
    if (tcpclient.write(strsendbuffer)==false) return false; // 向服务端发送请求报文。

    if (tcpclient.read(strrecvbuffer,60)==false) return false; // 接收服务端的回应报文。
    logfile.write("接收：%s\n",strrecvbuffer.c_str());

    // 心跳机制的代码可简单化处理，只需要收到对端的回应就行了，不必判断回应的内容。

    return true;
}

void EXIT(int sig)
{
    logfile.write("程序退出，sig=%d\n\n",sig);

    exit(0);
}