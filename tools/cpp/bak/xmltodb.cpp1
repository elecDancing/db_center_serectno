/*
 *  程序名：xmltodb.cpp，本程序是共享平台的公共功能模块，用于把xml文件入库到Oracle的表中。
 *  作者：Prtrick。
*/
#include "_public.h"
#include "_ooci.h"
using namespace idc;

// 程序运行参数的结构体。
struct st_arg
{
    char connstr[101];          // 数据库的连接参数。
    char charset[51];            // 数据库的字符集。
    char inifilename[301];    // 数据入库的参数配置文件。
    char xmlpath[301];         // 待入库xml文件存放的目录。
    char xmlpathbak[301];   // xml文件入库后的备份目录。
    char xmlpatherr[301];    // 入库失败的xml文件存放的目录。
    int  timetvl;                    // 本程序运行的时间间隔，本程序常驻内存。
    int  timeout;                   // 本程序运行时的超时时间。
    char pname[51];            // 本程序运行时的程序名。
} starg;

void _help(char *argv[]);                                  // 程序的帮助文档

bool _xmltoarg(const char *strxmlbuffer);      // 把xml解析到参数starg结构中

clogfile logfile;         // 本程序运行的日志。
connection conn;     // 数据库连接。
 
void EXIT(int sig);     // 程序退出的信号处理函数。

bool _xmltodb();      // 业务处理主函数。

// 数据入库参数的结构体。
struct st_xmltotable
{
    char filename[101];    // xml文件的匹配规则，用逗号分隔。
    char tname[31];         // 待入库的表名。
    int    uptbz;                // 更新标志：1-更新；2-不更新。
    char execsql[301];     // 处理xml文件之前，执行的SQL语句。
} stxmltotable;
vector<struct st_xmltotable> vxmltotable;             // 数据入库的参数的容器。
bool loadxmltotable();                                             // 把数据入库的参数配置文件starg.inifilename加载到vxmltotable容器中。
bool findxmltotable(const string &xmlfilename);   // 根据文件名，从vxmltotable容器中查找的入库参数，存放在stxmltotable结构体中。

int main(int argc,char *argv[])
{
    if (argc!=3) { _help(argv); return -1; }

    // 关闭全部的信号和输入输出。
    // 设置信号,在shell状态下可用 "kill + 进程号" 正常终止些进程。
    // 但请不要用 "kill -9 +进程号" 强行终止。
    // closeioandsignal(true); 
    signal(SIGINT,EXIT); signal(SIGTERM,EXIT);

    if (logfile.open(argv[1])==false)
    {
        printf("打开日志文件失败（%s）。\n",argv[1]); return -1;
    }

    // 把xml解析到参数starg结构中
    if (_xmltoarg(argv[2])==false) return -1;

    _xmltodb();           // 业务处理主函数。
}

// 显示程序的帮助
void _help(char *argv[])
{
    printf("Using:/project/tools/bin/xmltodb logfilename xmlbuffer\n\n");

    printf("Sample:/project/tools/bin/procctl 10 /project/tools/bin/xmltodb /log/idc/xmltodb_vip.log "\
              "\"<connstr>idc/idcpwd@snorcl11g_128</connstr><charset>Simplified Chinese_China.AL32UTF8</charset>"\
              "<inifilename>/project/idc/ini/xmltodb.xml</inifilename>"\
              "<xmlpath>/idcdata/xmltodb/vip</xmlpath><xmlpathbak>/idcdata/xmltodb/vipbak</xmlpathbak>"\
              "<xmlpatherr>/idcdata/xmltodb/viperr</xmlpatherr>"\
              "<timetvl>5</timetvl><timeout>50</timeout><pname>xmltodb_vip</pname>\"\n\n");

    printf("本程序是共享平台的公共功能模块，用于把xml文件入库到Oracle的表中。\n");
    printf("logfilename   本程序运行的日志文件。\n");
    printf("xmlbuffer     本程序运行的参数，用xml表示，具体如下：\n\n");

    printf("connstr     数据库的连接参数，格式：username/passwd@tnsname。\n");
    printf("charset     数据库的字符集，这个参数要与数据源数据库保持一致，否则会出现中文乱码的情况。\n");
    printf("inifilename 数据入库的参数配置文件。\n");
    printf("xmlpath     待入库xml文件存放的目录。\n");
    printf("xmlpathbak  xml文件入库后的备份目录。\n");
    printf("xmlpatherr  入库失败的xml文件存放的目录。\n");
    printf("timetvl     扫描xmlpath目录的时间间隔（执行入库任务的时间间隔），单位：秒，视业务需求而定，2-30之间。\n");
    printf("timeout     本程序的超时时间，单位：秒，视xml文件大小而定，建议设置30以上。\n");
    printf("pname       进程名，尽可能采用易懂的、与其它进程不同的名称，方便故障排查。\n\n");
}

// 把xml解析到参数starg结构中
bool _xmltoarg(const char *strxmlbuffer)
{
    memset(&starg,0,sizeof(struct st_arg));

    getxmlbuffer(strxmlbuffer,"connstr",starg.connstr,100);
    if (strlen(starg.connstr)==0) { logfile.write("connstr is null.\n"); return false; }

    getxmlbuffer(strxmlbuffer,"charset",starg.charset,50);
    if (strlen(starg.charset)==0) { logfile.write("charset is null.\n"); return false; }

    getxmlbuffer(strxmlbuffer,"inifilename",starg.inifilename,300);
    if (strlen(starg.inifilename)==0) { logfile.write("inifilename is null.\n"); return false; }

    getxmlbuffer(strxmlbuffer,"xmlpath",starg.xmlpath,300);
    if (strlen(starg.xmlpath)==0) { logfile.write("xmlpath is null.\n"); return false; }

    getxmlbuffer(strxmlbuffer,"xmlpathbak",starg.xmlpathbak,300);
    if (strlen(starg.xmlpathbak)==0) { logfile.write("xmlpathbak is null.\n"); return false; }

    getxmlbuffer(strxmlbuffer,"xmlpatherr",starg.xmlpatherr,300);
    if (strlen(starg.xmlpatherr)==0) { logfile.write("xmlpatherr is null.\n"); return false; }

    getxmlbuffer(strxmlbuffer,"timetvl",starg.timetvl);
    if (starg.timetvl< 2) starg.timetvl=2;   
    if (starg.timetvl>30) starg.timetvl=30;

    getxmlbuffer(strxmlbuffer,"timeout",starg.timeout);
    if (starg.timeout==0) { logfile.write("timeout is null.\n"); return false; }

    getxmlbuffer(strxmlbuffer,"pname",starg.pname,50);
    if (strlen(starg.pname)==0) { logfile.write("pname is null.\n"); return false; }

    return true;
}

void EXIT(int sig)
{
    logfile.write("程序退出，sig=%d\n\n",sig);

    conn.disconnect();

    exit(0);
}

// 业务处理主函数。
bool _xmltodb()
{
    // 把数据入库的参数配置文件starg.inifilename加载到vxmltotable容器中。
    if (loadxmltotable()==false) return false;

    if (conn.connecttodb(starg.connstr,starg.charset) != 0)
    {
        logfile.write("connect database(%s) failed.\n%s\n",starg.connstr,conn.message()); return false;
    }
    logfile.write("connect database(%s) ok.\n",starg.connstr);

    cdir dir;

    while (true)      // 每循环一次，执行一次入库任务。
    {
        // 打开starg.xmlpath目录，为了保证先生成的xml文件先入库，打开目录的时候，应该按文件名排序。
        if (dir.opendir(starg.xmlpath,"*.XML",10000,false,true)==false)
        {
            logfile.write("dir.opendir(%s) failed.\n",starg.xmlpath); return false;
        }

        while (true)
        {
            // 读取目录，得到一个xml文件。
            if (dir.readdir()==false) break;

            logfile.write("处理文件%s...",dir.m_ffilename.c_str());

            // 处理xml文件的子函数。

            logfile << "ok.\n";
        }
break;        // 测试代码，先不循环，让程序退出。 
        sleep(starg.timetvl);
    }

    return true;
}

// 把数据入库的参数配置文件starg.inifilename加载到vxmltotable容器中。
bool loadxmltotable()
{
    vxmltotable.clear();

    cifile ifile;
    if (ifile.open(starg.inifilename)==false)
    {
        logfile.write("ifile.open(%s) 失败。\n",starg.inifilename); return false;
    }

    string strbuffer;

    while (true)
    {
        if (ifile.readline(strbuffer,"<endl/>")==false) break;

        memset(&stxmltotable,0,sizeof(struct st_xmltotable));

        getxmlbuffer(strbuffer,"filename",stxmltotable.filename,100);   // xml文件的匹配规则，用逗号分隔。
        getxmlbuffer(strbuffer,"tname",stxmltotable.tname,30);            // 待入库的表名。
        getxmlbuffer(strbuffer,"uptbz",stxmltotable.uptbz);                   // 更新标志：1-更新；2-不更新。
        getxmlbuffer(strbuffer,"execsql",stxmltotable.execsql,300);       // 处理xml文件之前，执行的SQL语句。
   
      vxmltotable.push_back(stxmltotable);
    }

    logfile.write("loadxmltotable(%s) ok.\n",starg.inifilename);

    return true;
}

// 根据文件名，从vxmltotable容器中查找的入库参数，存放在stxmltotable结构体中。
bool findxmltotable(const string &xmlfilename)
{
    for ( auto &aa : vxmltotable)
    {
        if (matchstr(xmlfilename,aa.filename)==true)
        {
            stxmltotable=aa;  
            return true;
        }
    }

    return false;
}
